From 4a9e2763f1ef83dc510ab1b6899f837dcdf15c9c Mon Sep 17 00:00:00 2001
From: *TJ <*tjjohn000@gmail.com*>
Date: Sun, 19 Sep 2021 19:10:09 +0530
Subject: [PATCH] Patch file

---
 0001-Unit-test.patch               | 428 +++++++++++++++++++++++++++++
 __pycache__/client3.cpython-39.pyc | Bin 0 -> 1136 bytes
 2 files changed, 428 insertions(+)
 create mode 100644 0001-Unit-test.patch
 create mode 100644 __pycache__/client3.cpython-39.pyc

diff --git a/0001-Unit-test.patch b/0001-Unit-test.patch
new file mode 100644
index 0000000..6f32579
--- /dev/null
+++ b/0001-Unit-test.patch
@@ -0,0 +1,428 @@
+From 1d87ac3de56a436b67d065b07db7674037517be8 Mon Sep 17 00:00:00 2001
+From: *TJ <*tjjohn000@gmail.com*>
+Date: Sun, 19 Sep 2021 18:45:25 +0530
+Subject: [PATCH] Unit  test
+
+---
+ .idea/.gitignore                              |   3 +
+ .idea/JPMC-tech-task-1-py3.iml                |  12 ++
+ .../inspectionProfiles/profiles_settings.xml  |   6 +
+ .idea/misc.xml                                |   4 +
+ .idea/modules.xml                             |   8 ++
+ .idea/vcs.xml                                 |   6 +
+ client3.py                                    |  54 +++++----
+ client_test.py                                |  65 +++++++++-
+ server3.py                                    | 112 +++++++++---------
+ 9 files changed, 189 insertions(+), 81 deletions(-)
+ create mode 100644 .idea/.gitignore
+ create mode 100644 .idea/JPMC-tech-task-1-py3.iml
+ create mode 100644 .idea/inspectionProfiles/profiles_settings.xml
+ create mode 100644 .idea/misc.xml
+ create mode 100644 .idea/modules.xml
+ create mode 100644 .idea/vcs.xml
+
+diff --git a/.idea/.gitignore b/.idea/.gitignore
+new file mode 100644
+index 0000000..0e40fe8
+--- /dev/null
++++ b/.idea/.gitignore
+@@ -0,0 +1,3 @@
++
++# Default ignored files
++/workspace.xml
+\ No newline at end of file
+diff --git a/.idea/JPMC-tech-task-1-py3.iml b/.idea/JPMC-tech-task-1-py3.iml
+new file mode 100644
+index 0000000..7c9d48f
+--- /dev/null
++++ b/.idea/JPMC-tech-task-1-py3.iml
+@@ -0,0 +1,12 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<module type="PYTHON_MODULE" version="4">
++  <component name="NewModuleRootManager">
++    <content url="file://$MODULE_DIR$" />
++    <orderEntry type="inheritedJdk" />
++    <orderEntry type="sourceFolder" forTests="false" />
++  </component>
++  <component name="TestRunnerService">
++    <option name="projectConfiguration" value="pytest" />
++    <option name="PROJECT_TEST_RUNNER" value="pytest" />
++  </component>
++</module>
+\ No newline at end of file
+diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
+new file mode 100644
+index 0000000..105ce2d
+--- /dev/null
++++ b/.idea/inspectionProfiles/profiles_settings.xml
+@@ -0,0 +1,6 @@
++<component name="InspectionProjectProfileManager">
++  <settings>
++    <option name="USE_PROJECT_PROFILE" value="false" />
++    <version value="1.0" />
++  </settings>
++</component>
+\ No newline at end of file
+diff --git a/.idea/misc.xml b/.idea/misc.xml
+new file mode 100644
+index 0000000..a2e120d
+--- /dev/null
++++ b/.idea/misc.xml
+@@ -0,0 +1,4 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
++</project>
+\ No newline at end of file
+diff --git a/.idea/modules.xml b/.idea/modules.xml
+new file mode 100644
+index 0000000..c2eb5cf
+--- /dev/null
++++ b/.idea/modules.xml
+@@ -0,0 +1,8 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="ProjectModuleManager">
++    <modules>
++      <module fileurl="file://$PROJECT_DIR$/.idea/JPMC-tech-task-1-py3.iml" filepath="$PROJECT_DIR$/.idea/JPMC-tech-task-1-py3.iml" />
++    </modules>
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/.idea/vcs.xml b/.idea/vcs.xml
+new file mode 100644
+index 0000000..94a25f7
+--- /dev/null
++++ b/.idea/vcs.xml
+@@ -0,0 +1,6 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="VcsDirectoryMappings">
++    <mapping directory="$PROJECT_DIR$" vcs="Git" />
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/client3.py b/client3.py
+index f1771c3..ce1a8d1 100644
+--- a/client3.py
++++ b/client3.py
+@@ -1,22 +1,3 @@
+-################################################################################
+-#
+-#  Permission is hereby granted, free of charge, to any person obtaining a
+-#  copy of this software and associated documentation files (the "Software"),
+-#  to deal in the Software without restriction, including without limitation
+-#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
+-#  and/or sell copies of the Software, and to permit persons to whom the
+-#  Software is furnished to do so, subject to the following conditions:
+-#
+-#  The above copyright notice and this permission notice shall be included in
+-#  all copies or substantial portions of the Software.
+-#
+-#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+-#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+-#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+-#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+-#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+-#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+-#  DEALINGS IN THE SOFTWARE.
+ 
+ import urllib.request
+ import time
+@@ -35,14 +16,16 @@ def getDataPoint(quote):
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+-	price = bid_price
++	price = (bid_price+ask_price)/2
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+ 	""" Get ratio of price_a and price_b """
+ 	""" ------------- Update this function ------------- """
++	if(price_a==0):
++		return
+ 	""" Also create some unit tests for this function in client_test.py """
+-	return 1
++	return price_a/price_b
+ 
+ # Main
+ if __name__ == "__main__":
+@@ -52,8 +35,35 @@ if __name__ == "__main__":
+ 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+ 		""" ----------- Update to get the ratio --------------- """
++		prices={}
+ 		for quote in quotes:
+ 			stock, bid_price, ask_price, price = getDataPoint(quote)
++			prices[stock]=price
+ 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-		print ("Ratio %s" % getRatio(price, price))
++		print ("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
++
++
++
++
++
++
++################################################################################
++#
++#  Permission is hereby granted, free of charge, to any person obtaining a
++#  copy of this software and associated documentation files (the "Software"),
++#  to deal in the Software without restriction, including without limitation
++#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
++#  and/or sell copies of the Software, and to permit persons to whom the
++#  Software is furnished to do so, subject to the following conditions:
++#
++#  The above copyright notice and this permission notice shall be included in
++#  all copies or substantial portions of the Software.
++#
++#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
++#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
++#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
++#  DEALINGS IN THE SOFTWARE.
+diff --git a/client_test.py b/client_test.py
+index af2bf26..b712ecf 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -1,24 +1,77 @@
+ import unittest
+-from client3 import getDataPoint
++from client3 import getDataPoint,getRatio
+ 
+ class ClientTest(unittest.TestCase):
++  """ ------------ 3 UNIT TEST FOR  getDataPoint ------------ """
++
++  def test_getDataPoint_calPrice(self):
++    q = [
++      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++
++    quote0 = "ABC", 120.48, 121.2, (120.48 + 121.2) / 2
++    """ ------------  assertion ------------ """
++    self.assertEqual(getDataPoint(q[0]), quote0)
++
+   def test_getDataPoint_calculatePrice(self):
+     quotes = [
+-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'},
++      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+-    """ ------------ Add the assertion below ------------ """
++    """ ------------  assertion  ------------ """
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
++
++
+ 
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+-    """ ------------ Add the assertion below ------------ """
++    """ ------------  assertion  ------------ """
++    for qt in quotes:
++      Result = (
++        qt["stock"],
++        qt["top_bid"]["price"],
++        qt["top_ask"]["price"],
++        ((qt["top_bid"]["price"] + qt["top_ask"]["price"]) / 2),
++      )
++      self.assertEqual(getDataPoint(qt), Result)
++
++  """ ------------ 5 UNIT TEST FOR  getRatio ------------ """
++
++  def test_getRatio_priceBZero(self):
++    price_a = 119.2
++    price_b = 0
++    """ ------------  assertion  ------------ """
++    self.assertIsNone(getRatio(price_a, price_b))
+ 
++  def test_getRatio_priceAZero(self):
++    price_a = 0
++    price_b = 121.68
++    """ ------------  assertion  ------------ """
++    self.assertEqual(getRatio(price_a, price_b), 0)
+ 
+-  """ ------------ Add more unit tests ------------ """
++  def test_getRatio_greaterThan1(self):
++    price_a = 346.48
++    price_b = 166.39
++    self.assertGreater(getRatio(price_a, price_b), 1)
+ 
++  def test_getRatio_LessThan1(self):
++    price_a = 166.39
++    price_b = 356.48
++    """ ------------ Add the assertion below ------------ """
++    self.assertLess(getRatio(price_a, price_b), 1)
++
++  def test_getRatio_exactlyOne(self):
++    price_a = 356.48
++    price_b = 356.48
++    """ ------------ Add the assertion below ------------ """
++    self.assertEqual(getRatio(price_a, price_b), 1)
+ 
+ 
+ if __name__ == '__main__':
+diff --git a/server3.py b/server3.py
+index 2de4e28..ab28a55 100644
+--- a/server3.py
++++ b/server3.py
+@@ -1,22 +1,4 @@
+-################################################################################
+-#
+-#  Permission is hereby granted, free of charge, to any person obtaining a
+-#  copy of this software and associated documentation files (the "Software"),
+-#  to deal in the Software without restriction, including without limitation
+-#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
+-#  and/or sell copies of the Software, and to permit persons to whom the
+-#  Software is furnished to do so, subject to the following conditions:
+-#
+-#  The above copyright notice and this permission notice shall be included in
+-#  all copies or substantial portions of the Software.
+-#
+-#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+-#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+-#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+-#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+-#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+-#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+-#  DEALINGS IN THE SOFTWARE.
++
+ 
+ #from itertools import izip
+ from random    import normalvariate, random
+@@ -55,36 +37,6 @@ FREQ = (12,    36,   50)
+ 
+ OVERLAP = 4
+ 
+-################################################################################
+-#
+-# Test Data
+-
+-def bwalk(min, max, std):
+-    """ Generates a bounded random walk. """
+-    rng = max - min
+-    while True:
+-        max += normalvariate(0, std)
+-        yield abs((max % (rng * 2)) - rng) + min
+-
+-def market(t0 = MARKET_OPEN):
+-    """ Generates a random series of market conditions,
+-        (time, price, spread).
+-    """
+-    for hours, px, spd in zip(bwalk(*FREQ), bwalk(*PX), bwalk(*SPD)):
+-        yield t0, px, spd
+-        t0 += timedelta(hours = abs(hours))
+-
+-def orders(hist):
+-    """ Generates a random set of limit orders (time, side, price, size) from
+-        a series of market conditions.
+-    """
+-    for t, px, spd in hist:
+-        stock = 'ABC' if random() > 0.5 else 'DEF'
+-        side, d  = ('sell', 2) if random() > 0.5 else ('buy', -2)
+-        order = round(normalvariate(px + (spd / d), spd / OVERLAP), 2)
+-        size  = int(abs(normalvariate(0, 100)))
+-        yield t, stock, side, order, size
+-
+ 
+ ################################################################################
+ #
+@@ -139,9 +91,9 @@ def order_book(orders, book, stock_name):
+ 
+ ################################################################################
+ #
+-# Test Data Persistence
++#  read data from csv  or Generete Manual Test data
+ 
+-def generate_csv():
++def generate_csv():              # Generete Manual Test data
+     """ Generate a CSV of order history. """
+     with open('test.csv', 'wb') as f:
+         writer = csv.writer(f)
+@@ -238,11 +190,11 @@ class App(object):
+     def __init__(self):
+         self._book_1    = dict()
+         self._book_2    = dict()
+-        self._data_1    = order_book(read_csv(), self._book_1, 'ABC')
++        self._data_1    = order_book(read_csv(), self._book_1, 'ABC')  # order_book and read_csv
+         self._data_2    = order_book(read_csv(), self._book_2, 'DEF')
+         self._rt_start = datetime.now()
+         self._sim_start, _, _  = next(self._data_1)
+-        self.read_10_first_lines()
++        self.read_10_first_lines()                                     #read data1 and data 2
+ 
+     @property
+     def _current_book_1(self):
+@@ -318,3 +270,57 @@ if __name__ == '__main__':
+         print ("No data found, generating...")
+         generate_csv()
+     run(App())
++
++
++
++################################################################################
++
++#   Manual -Test Data
++
++def bwalk(min, max, std):
++    """ Generates a bounded random walk. """
++    rng = max - min
++    while True:
++        max += normalvariate(0, std)
++        yield abs((max % (rng * 2)) - rng) + min
++
++def market(t0 = MARKET_OPEN):
++    """ Generates a random series of market conditions,
++        (time, price, spread).
++    """
++    for hours, px, spd in zip(bwalk(*FREQ), bwalk(*PX), bwalk(*SPD)):
++        yield t0, px, spd
++        t0 += timedelta(hours = abs(hours))
++
++def orders(hist):
++    """ Generates a random set of limit orders (time, side, price, size) from
++        a series of market conditions.
++    """
++    for t, px, spd in hist:
++        stock = 'ABC' if random() > 0.5 else 'DEF'
++        side, d  = ('sell', 2) if random() > 0.5 else ('buy', -2)
++        order = round(normalvariate(px + (spd / d), spd / OVERLAP), 2)
++        size  = int(abs(normalvariate(0, 100)))
++        yield t, stock, side, order, size
++
++
++
++################################################################################
++#
++#  Permission is hereby granted, free of charge, to any person obtaining a
++#  copy of this software and associated documentation files (the "Software"),
++#  to deal in the Software without restriction, including without limitation
++#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
++#  and/or sell copies of the Software, and to permit persons to whom the
++#  Software is furnished to do so, subject to the following conditions:
++#
++#  The above copyright notice and this permission notice shall be included in
++#  all copies or substantial portions of the Software.
++#
++#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
++#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
++#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
++#  DEALINGS IN THE SOFTWARE.
+\ No newline at end of file
+-- 
+2.31.0.windows.1
+
diff --git a/__pycache__/client3.cpython-39.pyc b/__pycache__/client3.cpython-39.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3366980660b8214d209b5a30bb518e5a46141260
GIT binary patch
literal 1136
zcmYjQ&2Aev5GHrIE6J8pCAMX&xv&L-RzMv)$R!ZcHm;loC|cKXkV6R-i?uki)?V$(
zBvr(!3=~iw#6I>#TA+`>YfriN)KiC)ZG^=9a&|cLaW-u<RtPTsTQB{qM#w+T_;8_*
zyg<@_Ba=kZoCxY=AObH#5qil4lYxk2C}PQE^g9t18OsXFD%524EKq;K3amoBpbNTB
zetswF5MDKap5D9q2%@Vduq$>=uIV+sy6>cTkP)#44={FDtV0FX7qrjBhG>aRu?1VO
z1{==_v}Fx8paq+-HDoQapp=}yL+=VyVNI^K3G#ZIEP|V}?<IXhI*s?(4>_29GBRe;
z-Py^@L7I<BZMx5PpY86PPeEOLoyjkMz0Cflgba}GR)iWu>LKYD$mWPkn_N=kw4hC7
zi1*RUz}xK34(Gu<+$1u3NG{o&I&02`46BJ}U4E!aIUN8`^PHDMZbrZh011-+lIBy;
z+?4zT3Q(!RATCprPRgt>+(z1zgELz(<s>=Iq>Uyj8^F>|_1XIXOYBe^4f8TJoybP#
z)6#%)Zd=0-l4X1iW0$IO-Tgt-DvJO1dfon84NCXTDL*YoMSmak8Q#_Z?(l~nk6!H^
zIHk93U@+P?m}C3N_T=Jee~@QTn5T~?7q)%^W*_T4boDkcsrEw`R%sJ=ohs)WxO#4v
z(;az;*HLj0;|SGd@CNlceMk_taP}#G1%@LeS?NIYjU*{g3wfg-bLF1y!1vM#Y~?28
zRyp<uOIF7~Tg6(BT)q}sIz~pYP8O)9KTVQxniWYh`|Py?QSwKcr-pxyFm@m5FF5w^
zrN0KX&aCRQVVn*3zUkR;|K+!xkHx*I%Jb~_u>u@5ZA84ZEi>5|1UuDbA!3Dnlw%RS
ze*5z1Crb}JPIrYA=@^p4vJBtSMi_enmL@jBSC(2-ZZlUfb2)*+#=}yLQ)8KeRNB}N
zffli^RI4hs=SM=hUtYNf@?+qqsW2bF<fcL`v3fqnna$xV_f(oAt5Uy17P6pP!yPs$
L4;gx!NUh+1CYBze

literal 0
HcmV?d00001

-- 
2.31.0.windows.1

